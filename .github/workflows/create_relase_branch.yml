name: Create Release Branch

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (format: vMAJOR.MINOR or vMAJOR.MINOR.PATCH, e.g., v1.0 or v1.0.0)'
        required: true

jobs:
  create_release_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: develop

      - name: Set up Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Validate Version Format
        run: |
          VERSION_PATTERN='^v[0-9]+\.[0-9]+(\.[0-9]+)?$'
          if [[ ! "${{ github.event.inputs.release_version }}" =~ $VERSION_PATTERN ]]; then
            echo "Error: Release version '${{ github.event.inputs.release_version }}' does not match the required format 'vMAJOR.MINOR' or 'vMAJOR.MINOR.PATCH'."
            exit 1
          fi

      - name: Fetch latest tags from master branch
        run: |
          git fetch origin master --tags
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "Latest tag on master: $LATEST_TAG"
        id: fetch_latest_tag

      - name: Extract the version number from the latest tag
        run: |
          # Strip the 'v' prefix from the latest tag
          LATEST_VERSION=$(echo "${{ steps.fetch_latest_tag.outputs.LATEST_TAG }}" | sed 's/^v//')
          echo "Latest version: $LATEST_VERSION"
          echo "::set-output name=LATEST_VERSION::$LATEST_VERSION"
        id: extract_version

      - name: Validate version is a valid successor
        run: |
          # Strip the 'v' prefix from the provided version number
          NEW_VERSION="${{ github.event.inputs.release_version }}"
          NEW_VERSION_STRIPPED=$(echo "$NEW_VERSION" | sed 's/^v//')

          # Ensure semver is installed
          sudo apt-get install -y npm
          npm install -g semver

          # Compare the new version with the latest version
          if ! npx semver $NEW_VERSION_STRIPPED -r ">$LATEST_VERSION"; then
            echo "Error: Provided version ($NEW_VERSION_STRIPPED) is not a valid successor to the latest version ($LATEST_VERSION)."
            exit 1
          else
            echo "Version $NEW_VERSION_STRIPPED is a valid successor to $LATEST_VERSION."
          fi
        env:
          LATEST_VERSION: ${{ steps.extract_version.outputs.LATEST_VERSION }}

      - name: Check for Existing Release Branches
        run: |
          git fetch origin

          if git ls-remote --heads origin 'release-*' | grep 'refs/heads/release-'; then
            echo "Error: An existing release branch was found. Only one release branch is allowed at a time."
            exit 1
          else
            echo "No existing release branches found. Proceeding..."
          fi

      - name: Create and Push Release Branch
        run: |
          RELEASE_BRANCH="release-${{ github.event.inputs.release_version }}"

          # Create the release branch from develop
          git checkout -b "$RELEASE_BRANCH"

          # Push the new release branch to the remote repository
          git push origin "$RELEASE_BRANCH"

          echo "Release branch '$RELEASE_BRANCH' created from 'develop' and pushed to origin."
